# Define SciTE settings for Lua files.

file.patterns.lua=*.lua;*.wlua;*.lexe;*.glua;*.gluaw;*.mlua;*.clua

shbang.lua=lua

filter.lua=Lua (lua)|$(file.patterns.lua)|

lexer.$(file.patterns.lua)=lua

open.suffix.*.lua=.lua
openpath.$(file.patterns.lua)=$(lua.directory)\lua

word.chars.lua=$(chars.alpha)$(chars.numeric)$(chars.accented)_%
word.characters.$(file.patterns.lua)=$(word.chars.lua)

api.$(file.patterns.lua)=$(SciteDefaultHome)\lualib5_annot.api
calltip.lua.word.characters=.:$(word.chars.lua)
calltip.lua.end.definition=)

keywordclass.lua=and break do else elseif end false for function if \
in local nil not or repeat return then true until while
keywords.$(file.patterns.lua)=$(keywordclass.lua)

# Basic Functions (in both versions of Lua)
keywordclass2.lua=_G _VERSION assert collectgarbage dofile error gcinfo loadfile loadstring \
print rawget rawset require tonumber tostring type unpack

#### Lua 5.0.3

# Keywords
keywordclass.lua50=\
and break do else elseif \
end for function if in \
local nil not or repeat \
return then until while false true

# Basic Functions
keywordclass2.lua5=\
assert collectgarbage dofile error _G \
getmetatable ipairs loadfile next pairs \
pcall print rawequal rawget rawset \
setmetatable tonumber tostring type _VERSION \
xpcall string table math coroutine io os debug

keywordclass2.lua50=$(keywordclass2.lua5) \
getfenv gcinfo loadlib loadstring require \
setfenv unpack _LOADED LUA_PATH _REQUIREDNAME

# String, Table , Mathematical, Bitwise
keywordclass3.lua5=\
string.byte string.char string.dump string.find string.format \
string.gsub string.len string.lower string.rep string.sub string.upper \
table.concat table.insert table.remove table.sort \
math.abs math.acos math.asin math.atan math.atan2 \
math.ceil math.cos math.deg math.exp math.floor \
math.frexp math.ldexp math.log math.max math.min \
math.pi math.pow math.rad math.random math.randomseed \
math.sin math.sqrt math.tan

keywordclass3.lua50=$(keywordclass3.lua5) \
string.gfind \
table.foreach table.foreachi table.getn table.setn \
math.mod math.log10

# Coroutine, Input/Output, System, Package
keywordclass4.lua50=\
coroutine.create coroutine.resume coroutine.status coroutine.wrap coroutine.yield \
io.close io.flush io.input io.lines io.open \
io.output io.read io.tmpfile io.type io.write \
io.stdin io.stdout io.stderr \
os.clock os.date os.difftime os.execute os.exit \
os.getenv os.remove os.rename os.setlocale os.time \
os.tmpname

# Debug (not enabled by default)
keywordclass5.lua50=\
debug.debug debug.gethook debug.getinfo debug.getlocal debug.getupvalue \
debug.setlocal debug.setupvalue debug.sethook debug.traceback

#### Lua 5.1.4

# Keywords
keywordclass.lua51=$(keywordclass.lua50)

# Basic Functions
keywordclass2.lua51=$(keywordclass2.lua5) \
getfenv load loadstring select \
setfenv unpack package

# String, Table , Mathematical, Bitwise
keywordclass3.lua51=$(keywordclass3.lua5) \
string.gmatch string.match string.reverse \
table.maxn \
math.cosh math.fmod math.huge math.log10 math.modf \
math.sinh math.tanh

# Coroutine, Input/Output, System, Package
keywordclass4.package=\
require package.cpath package.loaded \
package.loadlib package.path package.preload

keywordclass4.lua51=$(keywordclass4.lua50) \
coroutine.running io.popen \
module package.loaders package.seeall \
$(keywordclass4.package)

# Debug (not enabled by default)
keywordclass5.lua51=$(keywordclass5.lua50) \
debug.getfenv debug.getmetatable debug.getregistry debug.setfenv debug.setmetatable

#### Lua 5.2.0

# Keywords
keywordclass.lua52=$(keywordclass.lua50) goto

# Basic Functions
keywordclass2.lua52=$(keywordclass2.lua5) \
load rawlen select package bit32 _ENV

# String, Table , Mathematical, Bitwise
keywordclass3.bit32=\
bit32.arshift bit32.band bit32.bnot bit32.bor bit32.btest \
bit32.bxor bit32.extract bit32.replace bit32.lrotate bit32.lshift \
bit32.rrotate bit32.rshift

keywordclass3.lua52=$(keywordclass3.lua5) \
string.gmatch string.match string.reverse \
table.pack table.unpack \
math.cosh math.fmod math.huge math.modf math.sinh math.tanh \
$(keywordclass3.bit32)

# Coroutine, Input/Output, System, Package
keywordclass4.lua52=$(keywordclass4.lua50) \
coroutine.running io.popen \
package.config package.searchers package.searchpath \
$(keywordclass4.package)

# Debug (not enabled by default)
keywordclass5.lua52=$(keywordclass5.lua50) \
debug.getmetatable debug.getregistry debug.setmetatable \
debug.getuservalue debug.setuservalue debug.upvalueid debug.upvaluejoin

#### Lua 5.x

# Keywords
keywordclass.lua5x=$(keywordclass.lua52)

# Basic Functions
keywordclass2.lua5x=$(keywordclass2.lua5) \
getfenv gcinfo load loadlib loadstring \
require select setfenv unpack \
_LOADED LUA_PATH _REQUIREDNAME \
package rawlen package bit32 _ENV

# String, Table , Mathematical, Bitwise
keywordclass3.lua5x=$(keywordclass3.lua5) \
string.gfind string.gmatch string.match string.reverse \
table.foreach table.foreachi table.getn table.setn \
table.maxn table.pack table.unpack \
math.cosh math.fmod math.huge math.log10 math.modf \
math.mod math.sinh math.tanh \
$(keywordclass3.bit32)

# Coroutine, Input/Output, System, Package
keywordclass4.lua5x=$(keywordclass4.lua50) \
coroutine.running io.popen \
module package.loaders package.seeall \
package.config package.searchers package.searchpath \
$(keywordclass4.package)

# Debug (not enabled by default)
keywordclass5.lua5x=$(keywordclass5.lua50) \
debug.getfenv debug.getmetatable debug.getregistry debug.setfenv debug.setmetatable \
debug.getuservalue debug.setuservalue debug.upvalueid debug.upvaluejoin

# Keyword highlighting selection
# Options: lua4, lua50, lua51, lua52, lua5x (default)
# or enable everything like this: $(keywordclass.lua4)$(keywordclass.lua5x)
keywords.$(file.patterns.lua)=$(keywordclass.lua5x)
keywords2.$(file.patterns.lua)=$(keywordclass2.lua5x)
keywords3.$(file.patterns.lua)=$(keywordclass3.lua5x)
keywords4.$(file.patterns.lua)=$(keywordclass4.lua5x)

# Add keywords5, 6, 7 & 8 for user-defined libraries
#keywords5.$(file.patterns.lua)=
#keywords6.$(file.patterns.lua)=
#keywords7.$(file.patterns.lua)=
#keywords8.$(file.patterns.lua)=

#~ statement.indent.$(file.patterns.lua)=5 do else function then
#~ statement.lookback.$(file.patterns.lua)=20
indent.maintain.$(file.patterns.lua)=1

comment.block.lua=--~
comment.block.at.line.start.lua=1
comment.box.start.lua=---
comment.box.end.lua=--
comment.box.middle.lua=--!
comment.stream.start.lua=--[[
comment.stream.end.lua=]]--

# Lua styles

#lua.stdstyle.blockcommentbg=1
#lua.stdstyle.mlstringbg=1

luastyle.blockcomment1=$(stdstyle.comment1)
luastyle.blockcomment2=$(stdstyle.comment2)
if lua.stdstyle.blockcommentbg
      luastyle.blockcomment1=$(stdstyle.comment1),$(stdstyle.comment1.bg)
      luastyle.blockcomment2=$(stdstyle.comment2),$(stdstyle.comment2.bg)

luastyle.mlstring1=$(stdstyle.mlstring1)
if lua.stdstyle.mlstringbg
      luastyle.mlstring1=$(stdstyle.mlstring1),$(stdstyle.mlstring1.bg)

#Default
style.lua.32=$(font.code.base),fore:#000000
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.lua.0=fore:#FF0000
# Block comment (Lua 5.0)
style.lua.1=$(colour.code.comment.box),$(font.code.comment.box),back:#D0F0F0,eolfilled
# Line comment
style.lua.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment -- Not used in Lua (yet?)
style.lua.3=$(colour.notused),$(font.notused)
# Number
style.lua.4=$(colour.number)
# Keyword
style.lua.5=$(colour.keyword)
# (Double quoted) String
style.lua.6=$(colour.string)
# Character (Single quoted string)
style.lua.7=$(colour.char)
# Literal string
style.lua.8=$(colour.string),$(font.code.comment.box),back:#E0FFFF
# Preprocessor (obsolete in Lua 4.0 and up)
style.lua.9=$(colour.preproc)
# Operators
style.lua.10=$(colour.operator)
# Identifier (everything else...)
style.lua.11=
# End of line where string is not closed
style.lua.12=back:#E0C0E0,eolfilled
# Other keywords (bozo test colors, but toned down ;)
style.lua.13=$(style.lua.5),back:#F5FFF5
style.lua.14=$(style.lua.5),back:#F5F5FF
style.lua.15=$(style.lua.5),back:#FFF5F5
style.lua.16=$(style.lua.5),back:#FFF5FF
style.lua.17=$(style.lua.5),back:#FFFFF5
style.lua.18=$(style.lua.5),back:#FFA0A0
style.lua.19=$(style.lua.5),back:#FFF5F5
# Labels
style.lua.20=fore:#7F7F00
# Braces are only matched in operator style
braces.lua.style=10

# compatible with LuaBinaries for Lua 5.1; will work on both platforms.
command.compile.*.lua=luac -o "$(FileName).luac" "$(FileNameExt)"
command.go.*.lua=lua -e "io.stdout:setvbuf 'no'" "$(FileNameExt)"
command.go.*.mlua=metalua.bat "$(FileNameExt)"
command.go.*.wlua=wlua "$(FileNameExt)"
command.go.subsystem.*.wlua=1
command.build.*.lexe=lua -e "io.stdout:setvbuf 'no'" "$(FileNameExt)"
command.go.*.lexe=wlua "$(lua.directory)\lExecutor.wlua" "$(FileNameExt)"
command.go.subsystem.*.lexe=1

# Lua 4.0
#command.go.*.lua=Lua-4.0.exe -c -f "$(FileNameExt)"
